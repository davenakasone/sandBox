$date
	Mon Sep 20 00:29:21 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var wire 4 ! outY [3:0] $end
$var wire 1 " outC $end
$var reg 4 # inA [3:0] $end
$var reg 4 $ inB [3:0] $end
$var reg 1 % inC $end
$var reg 3 & sel [2:0] $end
$var integer 32 ' ii [31:0] $end
$var integer 32 ( jj [31:0] $end
$var integer 32 ) seed [31:0] $end
$scope module DUT $end
$var wire 4 * in_a [3:0] $end
$var wire 4 + in_b [3:0] $end
$var wire 1 % in_c $end
$var wire 3 , selector [2:0] $end
$var reg 7 - catch [6:0] $end
$var reg 1 " out_c $end
$var reg 4 . out_y [3:0] $end
$upscope $end
$scope task getRand $end
$upscope $end
$scope task showResults $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11 .
b11 -
b0 ,
b1011 +
b10 *
b11011001111000001100100110000101 )
b0 (
b0 '
b0 &
1%
b1011 $
b10 #
0"
b11 !
$end
#10
b110 !
b110 .
b110 -
b11 $
b11 +
b101 #
b101 *
b10101010011111001100011100011010 )
b1 (
#20
b10 !
b10 .
b10 -
0%
b1010 $
b1010 +
b1 #
b1 *
b10000110110111010100010001011 )
b10 (
#30
b110 !
b110 .
b110 -
b1000 $
b1000 +
b101 #
b101 *
b1101001101010001101101010101000 )
b11 (
#40
b1110 !
b1110 .
1%
b100 $
b100 +
b1111 #
b1111 *
b11000000011100001000000001 )
b1 &
b1 ,
b1 '
b0 (
#50
b1011 !
b1011 .
0%
b10 $
b10 +
b1100 #
b1100 *
b110010011000001111111111100110 )
b1 (
#60
b1100 !
b1100 .
1%
b0 $
b0 +
b1101 #
b1101 *
b1000010001000111101001101100111 )
b10 (
#70
b0 !
b0 .
b1 $
b1 +
b1 #
b1 *
b101110001110010110011001010100 )
b11 (
#80
b1100 !
b1100 .
0%
b10 $
b10 +
b110 #
b110 *
b1100111010001111001011000111101 )
b10 &
b10 ,
b10 '
b0 (
#90
b11 !
b11 .
b1 $
b1 +
b1001 #
b1001 *
b10100001010000011000100101110010 )
b1 (
#100
b1101 !
b1101 .
1%
b11 $
b11 +
b1110 #
b1110 *
b10111010011011100010000000000011 )
b10 (
#110
b1000 !
b1000 .
b0 $
b0 +
b100 #
b100 *
b111001010110110001000011000000 )
b11 (
#120
b10 !
b10 .
b1100 $
b1100 +
b10101100111100010100001000111001 )
b11 &
b11 ,
b11 '
b0 (
#130
b101 !
b101 .
b1010 $
b1010 +
b1011 #
b1011 *
b11111010110110111010111110111110 )
b1 (
#140
b110 !
b110 .
b1100 $
b1100 +
b1101 #
b1101 *
b11000011110011111110101001011111 )
b10 (
#150
b0 !
b0 .
b1011 $
b1011 +
b1 #
b1 *
b10000000111100100000010111101100 )
b11 (
#160
b1 !
b1 .
0%
b101 $
b101 +
b11 #
b11 *
b11111011000000011000000111110101 )
b100 &
b100 ,
b100 '
b0 (
#170
b0 !
b0 .
1%
b1 $
b1 +
b110 #
b110 *
b11101001000001010111111011001010 )
b1 (
#180
b1 !
b1 .
b1011 $
b1011 +
b101 #
b101 *
b11011100101010000100111001111011 )
b10 (
#190
b100 !
b100 .
0%
b101 $
b101 +
b110 #
b110 *
b10101111000010010011000111011000 )
b11 (
#200
b1111 !
b1111 .
1%
b1110 $
b1110 +
b111 #
b111 *
b11101110101110101101000101110001 )
b101 &
b101 ,
b101 '
b0 (
#210
b1011 !
b1011 .
b1 $
b1 +
b1010 #
b1010 *
b10101101011110011100001010010110 )
b1 (
#220
b1101 !
b1101 .
b100 $
b100 +
b1101 #
b1101 *
b10100111011111000010100001010111 )
b10 (
#230
b111 !
b111 .
b11 $
b11 +
b110 #
b110 *
b10001110011111100100000010000100 )
b11 (
#240
b1110 !
b1110 .
b1110 -
b1101 $
b1101 +
b0 #
b0 *
b111100110110110110110010101101 )
b110 &
b110 ,
b110 '
b0 (
#250
1"
b110 !
b110 .
b10110 -
b110 $
b110 +
b1111 #
b1111 *
b11110100011001000000011100100010 )
b1 (
#260
b1010 !
b1010 .
b11010 -
1"
b1100 $
b1100 +
b1101 #
b1101 *
b1001100100100100001001111110011 )
b10 (
#270
b10 !
b10 .
b10 -
0"
b1 $
b1 +
b0 #
b0 *
b10100110011011011001110111110000 )
b11 (
#280
1"
b1000 !
b1000 .
b1000 -
b1000 $
b1000 +
b1 #
b1 *
b11111010100110010100111110101001 )
b111 &
b111 ,
b111 '
b0 (
#290
b111 !
b111 .
b111 -
1"
0%
b1001 $
b1001 +
b10 #
b10 *
b11010011101011001001100001101110 )
b1 (
#300
b101 !
b101 .
b101 -
0"
b110 $
b110 +
b1011 #
b1011 *
b10101001010011100110110101001111 )
b10 (
#310
b110 !
b110 .
b110 -
1%
b111 $
b111 +
b1110 #
b1110 *
b110000010111100111011000011100 )
b11 (
#320
b1000 '
b100 (
#330
