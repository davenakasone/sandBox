
module topMod (
                    output wire [6:0] disp2,
                    output wire [6:0] disp1,
                    input wire [3:0] inpA,
                    input wire [3:0] inpB,
                    input wire Cin
            );
    wire [4:0] temp;
    wire [3:0] onez;
    wire [3:0] tenz;

    rca4bit adder (
                    .out_y(temp[3:0]),
                    .out_c(temp[4]),
                    .in_a(inpA),
                    .in_b(inpB),
                    .in_c(Cin)
                );

    my_bcd getDigs (
                        .tens(tenz),
                        .ones(onez),
                        .bin_in(temp)
                );
    
    seg7_dig dig2 (
                    .cntl_4bit(tenz),
                    .disp_4bit(disp2)
                );
    
    seg7_dig dig1 (
                    .cntl_4bit(onez),
                    .disp_4bit(disp1)
                );

endmodule


////~~~~ single digit 7-segment display


module seg7_dig(
                input wire [3:0] cntl_4bit,
                output reg [6:0] disp_4bit
            );

    parameter ON = 1'b0;
    parameter OFF = 1'b1;

    always @ (*) begin
        disp_4bit = {7{OFF}};
        case (cntl_4bit)
            4'b0000 : disp_4bit[5:0] = {6{ON}};
            4'b0001 : disp_4bit[2:1] = {2{ON}};
            4'b0010 :
                begin
                    disp_4bit[1:0] = {2{ON}};
                    disp_4bit[6] = ON;
                    disp_4bit[4:3] = {2{ON}};
                end
            4'b0011 :
                begin
                    disp_4bit[3:0] = {4{ON}};
                    disp_4bit[6] = ON;
                end
            4'b0100 :
                begin
                    disp_4bit[2:1] = {2{ON}};
                    disp_4bit[6:5] = {2{ON}};
                end 
            4'b0101 :
                begin
                    disp_4bit[0] = ON;
                    disp_4bit[3:2] = {2{ON}};
                    disp_4bit[6:5] = {2{ON}};
                end
            4'b0110 :
                begin
                    disp_4bit[0] = ON;
                    disp_4bit[6:2] = {5{ON}};
                end
            4'b0111 : disp_4bit[2:0] = {3{ON}};
            4'b1000 : disp_4bit[6:0] = {7{ON}};
            4'b1001 :
                begin
                    disp_4bit[6:0] = {7{ON}};
                    disp_4bit[4:3] = {2{OFF}};
                end
        endcase
    end
endmodule


////~~~~ get the 2 decimal digits of 5-bit binary


module my_bcd ( 
                    output reg [3:0] tens,
                    output reg [3:0] ones,
                    input wire [4:0] bin_in
            );

    integer idx;

    always @ (bin_in) begin
        tens = 4'b0000;
        ones = 4'b0000;
        
        for (idx = 4; idx >= 0; idx = idx - 1) begin
            if (tens >= 3'b101) tens = tens + 2'b11;
            if (ones >= 3'b101) ones = ones + 2'b11;
            
            tens = tens << 1;
            tens[0] = ones[3];
            ones = ones << 1;
            ones[0] = bin_in[idx];
        end
    end
endmodule


////~~~~ ripple carry adder, 4-bit


module rca4bit (
                output [3:0] out_y,
                output out_c,
                input [3:0] in_a,
                input [3:0] in_b,
                input in_c
            );

    wire co_0;
    wire co_1;
    wire co_2;
    
    fa1bit fa_0(out_y[0], co_0   , in_a[0], in_b[0], in_c);
    fa1bit fa_1(out_y[1], co_1   , in_a[1], in_b[1], co_0);
    fa1bit fa_2(out_y[2], co_2   , in_a[2], in_b[2], co_1);
    fa1bit fa_3(out_y[3], out_c  , in_a[3], in_b[3], co_2);
endmodule


////~~~~ full adder, 1-bit


module fa1bit (
                output out_y,
                output out_c,
                input in_a,
                input in_b,
                input in_c
            );

    assign out_y = (in_a ^ in_b) ^ in_c;
    assign out_c = (in_a & in_b) | (in_a & in_c) | (in_b & in_c);
endmodule


////////~~~~~~~~END>  ader7.v
