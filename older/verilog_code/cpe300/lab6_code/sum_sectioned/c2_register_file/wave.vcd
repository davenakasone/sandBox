$date
	Wed Oct  6 11:00:26 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var wire 8 ! port_B [7:0] $end
$var wire 8 " port_A [7:0] $end
$var reg 2 # RAA [1:0] $end
$var reg 1 $ RAE $end
$var reg 2 % RBA [1:0] $end
$var reg 1 & RBE $end
$var reg 2 ' WA [1:0] $end
$var reg 1 ( WE $end
$var reg 1 ) clock $end
$var reg 8 * from_mux [7:0] $end
$var integer 32 + ii [31:0] $end
$var integer 32 , seed [31:0] $end
$scope module DUT $end
$var wire 2 - RAA [1:0] $end
$var wire 1 $ RAE $end
$var wire 2 . RBA [1:0] $end
$var wire 1 & RBE $end
$var wire 2 / WA [1:0] $end
$var wire 1 ( WE $end
$var wire 1 ) clock $end
$var wire 8 0 from_mux [7:0] $end
$var wire 8 1 port_B [7:0] $end
$var wire 8 2 port_A [7:0] $end
$upscope $end
$scope task rand_reg $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b1111100111 ,
b0 +
b0 *
0)
1(
b0 '
0&
b0 %
0$
b0 #
b0 "
b0 !
$end
#1
b10100000 *
b10100000 0
b111010110000100110010100011111 ,
#5
1)
#10
0)
#11
b1 +
#12
b1 '
b1 /
b1101 *
b1101 0
b1101001100101011110101010111 ,
#15
1)
#20
0)
#22
b10 +
#23
b10 '
b10 /
b110101 *
b110101 0
b111011001010011110110010001111 ,
#25
1)
#30
0)
#33
b11 +
#34
b11 '
b11 /
b11000010 *
b11000010 0
b1000010110111001101001011000111 ,
#35
1)
#40
0)
#44
b10100000 "
b10100000 2
1$
b0 +
#45
b110 "
b110 2
b0 '
b0 /
b110 *
b110 0
b10000010111000100111111111111 ,
1)
#50
0)
#55
1)
b1 +
#56
b1101 "
b1101 2
b1 '
b1 /
b1 #
b1 -
b1111001 *
b1111001 0
b100001000101010100010000110111 ,
#60
0)
#65
b1111001 "
b1111001 2
1)
#66
b10 +
#67
b110101 "
b110101 2
b10 '
b10 /
b10 #
b10 -
b10111 *
b10111 0
b10111010100001000111101101111 ,
#70
0)
#75
b10111 "
b10111 2
1)
#77
b11 +
#78
b11000010 "
b11000010 2
b11 '
b11 /
b11 #
b11 -
b11001000 *
b11001000 0
b10111101101100110001000110100111 ,
#80
0)
#85
b11001000 "
b11001000 2
1)
#88
b110 !
b110 1
b0 "
b0 2
1&
0$
b0 +
#89
b0 '
b0 /
b10001001 *
b10001001 0
b1111010101111011010101011011111 ,
#90
0)
#95
b10001001 !
b10001001 1
1)
#99
b1 +
#100
b1111001 !
b1111001 1
b1 '
b1 /
b1 %
b1 .
b110 *
b110 0
b110100010011010011101100010111 ,
0)
#105
b110 !
b110 1
1)
#110
0)
b10 +
#111
b10111 !
b10111 1
b10 '
b10 /
b10 %
b10 .
b100111 *
b100111 0
b10100011000110101010001001001111 ,
#115
b100111 !
b100111 1
1)
#120
0)
#121
b11 +
#122
b11001000 !
b11001000 1
b11 '
b11 /
b11 %
b11 .
b111101 *
b111101 0
b10110001110101100000010000111 ,
#125
b111101 !
b111101 1
1)
#130
0)
#132
b111101 "
b111101 2
1$
b0 +
#133
b10001001 "
b10001001 2
b10001001 !
b10001001 1
b0 '
b0 /
b0 #
b0 -
b0 %
b0 .
b11100010 *
b11100010 0
b10100110100111100111010110111111 ,
#135
b11100010 "
b11100010 2
b11100010 !
b11100010 1
1)
#140
0)
#143
b1 +
#144
b110 "
b110 2
b110 !
b110 1
b1 '
b1 /
b1 #
b1 -
b1 %
b1 .
b11011101 *
b11011101 0
b11011010100100101010000111110111 ,
#145
b11011101 "
b11011101 2
b11011101 !
b11011101 1
1)
#150
0)
#154
b10 +
#155
b11101 "
b11101 2
b11101 !
b11101 1
b10 '
b10 /
b10 #
b10 -
b10 %
b10 .
b11101 *
b11101 0
b10111001010000000010010100101111 ,
1)
#160
0)
#165
1)
b11 +
#166
b111101 "
b111101 2
b111101 !
b111101 1
b11 '
b11 /
b11 #
b11 -
b11 %
b11 .
b1010110 *
b1010110 0
b1001110001010111101111101100111 ,
#170
0)
#175
b1010110 "
b1010110 2
b1010110 !
b1010110 1
1)
#176
b100 +
#180
0)
#181
