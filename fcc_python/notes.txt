never put the same data in different entries (make everything else in the database copy it)
that way, there is only one point of failure, one place copies come from, etc

organizing data is important, use a database when possible (they are well proven)
you should be able to plan everything on paper before writting any code
relationships should be used to eliminate verital repitition
use a key to point, instead of making a lot of copies (primary, logic, foreign)
work from leaves up for a database

the relationship is important
1:many
many:many  // junction table
many:1
...
if you want any type of scale, you need a database, it can't be ignored
be sure to look at your data (visualize)

it is nice to have a raw data base and a clean/processed data base
use the raw database to pull data
use the clean data base for program use

robots.txt
usually at root of website, says what crawlers can and can't do
database should be the presistent list (won't go away when program stops)

programming should power your data analysis
acquire data, clean data, transform data, analyze data, do something with results

32-bit python will work on everything
64-bit should only be used on something that will deploy the 64-bit CPU
be aware of the operating system you are running python on (windows, linux, mac...)

when data is loaded, look at data frame to make sure it is plausable
.shape, .describe, .mean.... visualize a little also
good to know if there are 'outliers'
almost everyone uses jupyter, know the shortcuts
move around cells with arrows
jupyter is "mode-based" like VIM
pick code, markdown, or raw
[a], [b], [d][d], [y], [m], 
keep active and execute, [cntrl] + [enter]
run a cell and advance, [cntl] + [shift]
undo, [z] ... no [cntrl] + [z]
https://gist.github.com/discdiver/9e00618756d120a8c9fa344ac1c375ac

jupyter was made to do work
getting data into the environment is built-in
matplotlib is a prefered citizen for jupyter (figures display easy)
$ jupyter lab

numpy is foundational for python, it is the basis for most libraries
it is just made to work with numbers, but has lots of applications
processing in pure python is very slow otherwise
numpy is good for array processing (what it is optimized for)
pure python might not give you contingious memory of elements, numpy will (probably)
fast array handling is the future (+ linear algebra)
you can use strings with numpy, but it is better for numbers

just because you use python doesn't mean you can neglect basic things like memory management
select the correct data structures and use the appropriate alogrithms
python can only abstract away so much, it is a high-level oo langauge

pandas is the other tool (sits on numpy and matplotlib)
for using data, very mature library

$ node // run nodejs from terminal
definetly start with js...eventually pick your path (react+redux) or (angular+typescript+...)
[var] is bad...it will make everything global and let you step all over the declared variable
[let] is best for most situations (guarunteed 1x declaration, scoped, etc)
typescript is better (datatype is explicit)
